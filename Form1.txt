using System;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Drawing;

namespace TDMAutomate
{
    public partial class Form1 : Form
    {
        private string configPath;

        public Form1()
        {
            InitializeComponent();
            InitializeTabControl();
        }

        private void InitializeTabControl()
        {
            // Create a new TabControl
            TabControl tabControl = new TabControl();
            tabControl.Dock = DockStyle.Fill;
            

            // Create two TabPages
            TabPage tabPage1 = new TabPage("ConfigUpdater");
            TabPage tabPage2 = new TabPage("NewTab");

            // Add controls to TabPage1
            tabPage1.Controls.Add(CreateConfigUpdaterControls());

            // Add controls to TabPage2
            tabPage2.Controls.Add(CreateNewTabControls());

            // Add TabPages to TabControl
            tabControl.TabPages.Add(tabPage1);
            tabControl.TabPages.Add(tabPage2);

            // Add TabControl to the Form
            this.Controls.Add(tabControl);
        }

        private Control CreateConfigUpdaterControls()
        {
            Panel panel = new Panel();
            panel.Dock = DockStyle.Fill;

            // Add your existing controls here
            TextBox tdmRunTextBox = new TextBox { Text = "TRUE", Enabled = false, Location = new Point(20, 20) };
            ComboBox carryOnTestCaseComboBox = new ComboBox { Location = new Point(20, 60) };
            carryOnTestCaseComboBox.Items.AddRange(new string[] { "TRUE", "FALSE" });
            carryOnTestCaseComboBox.SelectedIndex = 1;
            carryOnTestCaseComboBox.Enabled = false;

            Button browseButton = new Button { Text = "Browse", Location = new Point(20, 100) };
            //browseButton.Click += browseButton_Click;
            this.browseButton.Click += new System.EventHandler(this.browseButton_Click);
            
            Button updateButton = new Button { Text = "Update", Location = new Point(20, 140) };
            this.updateButton.Click += new System.EventHandler(this.updateButton_Click);

            panel.Controls.Add(tdmRunTextBox);
            panel.Controls.Add(carryOnTestCaseComboBox);
            panel.Controls.Add(browseButton);
            panel.Controls.Add(updateButton);

            return panel;
        }

        private Control CreateNewTabControls()
        {
            Panel panel = new Panel();
            panel.Dock = DockStyle.Fill;

            // Add new controls for the second tab here
            Label label = new Label { Text = "New Tab Content", Location = new Point(20, 20) };
            panel.Controls.Add(label);

            return panel;
        }

        private void browseButton_Click(object sender, EventArgs e)
        {
            FolderBrowserDialog folderDialog = new FolderBrowserDialog();
            if (folderDialog.ShowDialog() == DialogResult.OK)
            {
                configPath = Path.Combine(folderDialog.SelectedPath, @"Data\Config\");
                pathTextBox.Text = configPath;
            }
        }

        private void updateButton_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(configPath)) return;

            string selectedEnvironment = envComboBox.SelectedItem?.ToString();
            string dbPassword = dbPasswordTextBox.Text;

            if (string.IsNullOrEmpty(selectedEnvironment) || string.IsNullOrEmpty(dbPassword))
            {
                MessageBox.Show("Please select an environment and enter a DB password!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string configFile = Path.Combine(configPath, "Config.csv");
            string envManagerFile = Path.Combine(configPath, "Environment_Manager.csv");

            var configData = File.ReadAllLines(configFile).Select(line => line.Split(',')).ToList();

            // Updating Config.csv
            for (int i = 0; i < configData.Count; i++)
            {
                if (configData[i][0] == "Environment") configData[i][1] = selectedEnvironment;
                if (configData[i][0] == "UserName") configData[i][1] = userNameTextBox.Text;
                if (configData[i][0] == "Password") configData[i][1] = passwordTextBox.Text;
                if (configData[i][0] == "DBPassword") configData[i][1] = dbPassword; // Updating DBPassword
                if (configData[i][0] == "TDMRun") configData[i][1] = "TRUE"; // Always TRUE
                if (configData[i][0] == "CarryOnTestCase") configData[i][1] = "FALSE"; // Always FALSE
                if (configData[i][0] == "Retries") configData[i][1] = "6"; // Always 6
            }
            File.WriteAllLines(configFile, configData.Select(line => string.Join(",", line)));

            // Updating Environment_Manager.csv
            var envManagerData = File.ReadAllLines(envManagerFile).Select(line => line.Split(',')).ToList();
            int envColumnIndex = -1;

            // Find the column index for the selected environment
            string[] headers = envManagerData[0]; // First row contains headers
            for (int i = 0; i < headers.Length; i++)
            {
                if (headers[i] == selectedEnvironment)
                {
                    envColumnIndex = i;
                    break;
                }
            }

            if (envColumnIndex > -1)
            {
                for (int i = 1; i < envManagerData.Count; i++) // Start from row after headers
                {
                    if (envManagerData[i][0] == "sondbUserpwd") // Matching key
                    {
                        envManagerData[i][envColumnIndex] = dbPassword; // Update password in correct environment column
                        break;
                    }
                }

                File.WriteAllLines(envManagerFile, envManagerData.Select(line => string.Join(",", line)));
                MessageBox.Show("Config and Environment Manager files updated successfully!", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                MessageBox.Show("Environment not found in Environment_Manager.csv!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            if (envComboBox.Items.Count > 0) // Ensure dropdown has items
            {
                envComboBox.SelectedIndex = 0; // Set default selection
            }
        }

        private void Form1_Load_1(object sender, EventArgs e)
        {

        }

        private void tabPage1_Click(object sender, EventArgs e)
        {

        }
    }
}
